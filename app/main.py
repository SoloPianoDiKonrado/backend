from __future__ import annotations

from enum import Enum
from fastapi import FastAPI, HTTPException, status
from pydantic import BaseModel, Field
from typing import Optional, Any
import json
import os
from dotenv import load_dotenv

# Za≈Çaduj zmienne ≈õrodowiskowe
load_dotenv()
from .chat_gemini import GeminiChat

# Globalna instancja chatu (dla pojedynczego u≈ºytkownika)
chat_instance: Optional[GeminiChat] = None

# Modele Pydantic dla request/response
class ChatRequest(BaseModel):
    message: str

class ChatResponse(BaseModel):
    response: str
    status: str
    model: str
    error: Optional[str] = None

class GameInterface(BaseModel):
    money: int
    health: int #0-200
    relations: int
    satisfaction: int
    passive_income: int

    age: int
    job: str
    education: str

class GenerateYearRequest(BaseModel):
    game_state: GameInterface

class Currency(str, Enum):
    MONEY = "money"
    HEALTH = "health"
    RELATIONS = "relations"
    SATISFACTION = "satisfaction"


class CurrencyChange(BaseModel):
    currency: Currency
    amount: int


class GameOption(BaseModel):
    name: str  # short name
    price: int
    currency: Currency
    results: list[CurrencyChange]

class GenerateYearResponse(BaseModel):
    flavour_text: str
    options: list[GameOption]

class GameHistory(BaseModel):
    options: list[GameOption]

class GenerateYearRequest(BaseModel):
    game_interface: GameInterface
    options_amount: int
    history: list[GameHistory]

app = FastAPI(
    title="Chat with Gemini API",
    description="API do czatu z Google Gemini",
    version="1.1.0"
)

@app.on_event("startup")
def startup_event():
    print(os.getenv("GEMINI_API_KEY"))
    """Inicjalizuje instancjƒô chatu podczas startu aplikacji."""
    initialize_chat()

@app.get("/")
def read_root():
    return {
        "message": "Witaj wariacik! API dzia≈Ça jak nale≈ºy üöÄ",
        "docs": "/docs",
        "redoc": "/redoc",
        "chat_endpoints": {
            "chat": "/chat - wysy≈Çanie wiadomo≈õci",
            "clear": "/clear - czyszczenie historii rozmowy",
        }
    }


@app.post("/generate_year", response_model=GenerateYearResponse)
def generate_year(request: GenerateYearRequest) -> GenerateYearResponse:
    """
    Generates a new year in the game based on the current game state.
    """
    chat = get_chat_instance()

    # The system prompt is intentionally left empty as per the user's request.
    # It can be filled in later with instructions for the model.
    system_prompt = ""

    user_prompt = f"""
    Jeste≈õ Mistrzem Gry w symulatorze "Bieg przez ≈ºycie". Twoim celem jest tworzenie klarownych, lat ≈ºycia. Zawsze odpowiadaj WY≈ÅƒÑCZNIE w formacie JSON.
    **Zasady generowania:**
    1.  **Format odpowiedzi:** Zawsze zwracaj poprawny JSON.
    Stan gry:
    {request.game_state.json()}

    Proszƒô podaƒá odpowied≈∫ w prawid≈Çowym formacie JSON, zgodnie ze strukturƒÖ modelu GenerateYearResponse.
    Odpowied≈∫ powinna byƒá obiektem JSON z dwoma kluczami: 'flavour_text' (ciƒÖg znak√≥w) i 'options' (lista obiekt√≥w).
    Ka≈ºdy obiekt opcji musi mieƒá nastƒôpujƒÖce klucze: 'name' (ciƒÖg znak√≥w), 'price' (liczba ca≈Çkowita), 'currency' (jedno z: 'money', 'health', 'relations', 'satisfaction') i 'results' (lista obiekt√≥w zmian waluty).
    Ka≈ºdy obiekt zmiany waluty musi mieƒá klucze 'currency' i 'amount'.
    """


    try:
        response_text = chat.message(user_prompt)
        # Assuming the model returns a JSON string, we parse it.
        response_json = json.loads(response_text)
        return GenerateYearResponse(**response_json)
    except json.JSONDecodeError:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to decode JSON from model response."
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"An error occurred: {str(e)}"
        )


@app.get("/health")
def health_check():
    return {"status": "healthy"}

# Funkcja pomocnicza do inicjalizacji chatu
def initialize_chat():
    """Inicjalizuje instancjƒô chatu je≈õli jeszcze nie istnieje."""
    global chat_instance
    if chat_instance is None:
        try:
            chat_instance = GeminiChat()
            chat_instance.start_chat()
        except ValueError as e:
            # Je≈õli klucz API nie jest dostƒôpny, aplikacja nie bƒôdzie mog≈Ça w pe≈Çni dzia≈Çaƒá
            # Logujemy b≈ÇƒÖd, ale nie przerywamy startu serwera
            print(f"B≈ÇƒÖd inicjalizacji chatu: {str(e)}")

# Funkcja pomocnicza do pobrania instancji chatu
def get_chat_instance() -> GeminiChat:
    """Pobiera instancjƒô chatu, zg≈ÇaszajƒÖc b≈ÇƒÖd je≈õli nie jest dostƒôpna."""
    if chat_instance is None:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Chat service is not available. Check API key."
        )
    return chat_instance

@app.post("/chat", response_model=ChatResponse)
def chat(message: ChatRequest) -> ChatResponse:
    """
    Endpoint do wysy≈Çania wiadomo≈õci do modelu Gemini.
    """
    chat = get_chat_instance()
    try:
        response_text = chat.message(message.message)
        return ChatResponse(
            response=response_text,
            status="success",
            model=chat.model.model_name
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )

@app.delete("/clear")
def clear_history():
    """
    Endpoint do czyszczenia historii rozmowy.
    """
    chat = get_chat_instance()
    chat.clear_chat()
    # Po wyczyszczeniu, musimy ponownie zainicjowaƒá sesjƒô czatu
    chat.start_chat()

    return {
        "message": "Historia rozmowy zosta≈Ça wyczyszczona",
        "status": "success"
    }
