from __future__ import annotations

from enum import Enum
from fastapi import FastAPI, HTTPException, status
from pydantic import BaseModel, Field
from typing import Optional, Any, Dict
import json
import os
from dotenv import load_dotenv
from fastapi.middleware.cors import CORSMiddleware
from app.summary_service import SummaryService
from app.schemas import GameSummaryRequest, GameSummaryResponse, GenerateYearResponse, GameInterface, GenerateYearRequest

# Za≈Çaduj zmienne ≈õrodowiskowe
load_dotenv()
from .chat_gemini import GeminiChat

# Globalna instancja chatu (dla pojedynczego u≈ºytkownika)
chat_instance: Optional[GeminiChat] = None

# Modele Pydantic dla request/response
class ChatRequest(BaseModel):
    message: str

class ChatResponse(BaseModel):
    response: str
    status: str
    model: str
    error: Optional[str] = None

app = FastAPI(
    title="Chat with Gemini API",
    description="API do czatu z Google Gemini",
    version="1.1.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # zezw√≥l na wszystkie domeny
    allow_credentials=True,
    allow_methods=["POST", "GET", "OPTIONS"],
    allow_headers=["Content-Type", "Accept"],
)

# Import additional modules for IP logging
from fastapi import Request
import logging
import datetime

# Configure logging for IP tracking
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("ip_logger")

# IP Logger Middleware
@app.middleware("http")
async def log_ip_middleware(request: Request, call_next):
    """
    Middleware to log IP addresses of incoming requests.
    """
    # Get client IP address
    client_ip = request.client.host if request.client else "unknown"

    # Get additional request info
    method = request.method
    url_path = request.url.path
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Log the request
    logger.info(f"[{timestamp}] IP: {client_ip} - Method: {method} - Path: {url_path}")

    # Continue processing the request
    response = await call_next(request)
    return response

@app.on_event("startup")
def startup_event():
    print(os.getenv("GEMINI_API_KEY"))

@app.get("/")
def read_root():
    return {
        "message": "Witaj wariacik! API dzia≈Ça jak nale≈ºy üöÄ",
        "docs": "/docs",
        "redoc": "/redoc",
        "chat_endpoints": {
            "chat": "/chat - wysy≈Çanie wiadomo≈õci",
            "clear": "/clear - czyszczenie historii rozmowy",
        }
    }


@app.post("/generate_year", response_model=GenerateYearResponse)
def generate_year(request: GenerateYearRequest) -> GenerateYearResponse:
    """
    Generates a new year in the game based on the current game state.
    """

    
    system_prompt = """
# System Prompt: Mistrz Gry - "Architekt Przysz≈Ço≈õci"

## OPTYMALIZACJA WYDAJNO≈öCI
‚ö†Ô∏è KRYTYCZNE: Generuj odpowiedzi SZYBKO. Flash-lite wykonuje to w 2s - utrzymuj tƒô prƒôdko≈õƒá. ≈ªadnego rozwlekania, tylko konkretny JSON.

---

## TWOJA ROLA
Jeste≈õ "Mistrzem Gry" dla edukacyjnego symulatora ≈ºyciowego. Generujesz N opcji decyzyjnych (N = request.options_amount) dla kolejnego 5-letniego okresu, wp≈ÇywajƒÖcych na: money, health, relations, satisfaction, passive_income.

---

## FORMAT ODPOWIEDZI (BEZWZGLƒòDNIE OBOWIƒÑZUJƒÑCY)

Zwracaj TYLKO ten JSON (zero tekstu poza nim):
{
  "options": [
    {
      "name": "string max 40 znak√≥w",
      "price": 0,
      "currency": "money|health|relations|satisfaction",
      "is_work_related": false,
      "job_name": "string (tylko gdy is_work_related=true)", bardzo wa≈ºne!
      "results": [
        {"currency": "money|health|relations|satisfaction|passive_income", "amount": -1000}
      ]
    }
  ]
}
Wymagania strukturalne:
- Dok≈Çadnie N opcji w tablicy (N z requestu)
- price: int >= 0 (koszt natychmiastowy)
- currency: waluta kosztu (jedna z czterech, BEZ passive_income)
- is_work_related: true = nowa praca/awans/firma; false = edukacja/hobby/inwestycje
- job_name: wymagane gdy is_work_related=true
- results: 1-3 efekty (rzadko 3!), amount mo≈ºe byƒá ujemny
- degree: stopien naukowy - w przypadku jesli akcja jest studiami np. name: Studia magisterskie - degree: magister 
---

## MECHANIZM ANTY-POWT√ìRZE≈É (KLUCZOWE!)

Zasada unikania duplikat√≥w:
1. ≈öled≈∫ kontekst historii: Je≈õli gracz w≈Ça≈õnie sko≈Ñczy≈Ç studia - NIE proponuj ponownie studi√≥w
2. Rotacja temat√≥w: W ka≈ºdym wywo≈Çaniu mieszaj kategorie:
   - Kariera (30-40%)
   - Finanse/inwestycje (20-30%)
   - Zdrowie/lifestyle (15-25%)
   - Relacje/rozw√≥j osobisty (15-25%)

3. Warianty w obrƒôbie kategorii:
   Z≈ÅE: "Kurs programowania" ‚Üí "Kurs programowania Python" ‚Üí "Bootcamp programowania"
   DOBRE: "Kurs programowania" ‚Üí "Specjalizacja DevOps" ‚Üí "Freelancing IT"

4. R√≥≈ºnicuj skalƒô i ryzyko:
   - Opcja bezpieczna (ma≈Çe zmiany, pewne efekty)
   - Opcja zr√≥wnowa≈ºona (≈õrednie nak≈Çady, proporcjonalne efekty)
   - Opcja ryzykowna/ambitna (du≈ºe nak≈Çady LUB niepewny wynik)

5. Progresja kariery - ograniczenia:
   - MAX 1 awans na 10 lat (2 cykle)
   - Za≈Ço≈ºenie firmy: wymaga do≈õwiadczenia (>=10 lat pracy LUB passive_income >5000)
   - Brak teleportacji: Junior ‚Üí Mid ‚Üí Senior ‚Üí Lead (nie przeskakuj!)

---

## KONTEKSTOWA GENERACJA OPCJI

Analiza stanu gracza (game_interface):
Przed generowaniem sprawd≈∫:
wiek = game_interface.age
majƒÖtek = game_interface.money
doch√≥d_pasywny = game_interface.passive_income
stan_zdrowia = game_interface.health
wykszta≈Çcenie = game_interface.education
praca = game_interface.job
stan_cywilny = game_interface.married

Matryce decyzyjne wg wieku:

18-25 lat (Start)
- Edukacja (40%): studia, kursy zawodowe, certyfikaty
- Pierwsza praca (30%): sta≈ºe, juniorskie stanowiska
- Relacje (20%): budowanie sieci kontakt√≥w, hobby
- Lifestyle (10%): sport, podr√≥≈ºe niskobud≈ºetowe

26-35 lat (Budowa)
- Rozw√≥j kariery (35%): specjalizacja, awans, zmiana bran≈ºy
- Inwestycje (25%): mieszkanie, akcje, oszczƒôdno≈õci
- Rodzina (20%): ≈õlub (je≈õli married=false), planowanie
- Edukacja (20%): MBA, kursy zaawansowane

36-50 lat (Stabilizacja)
- Optymalizacja finansowa (40%): nieruchomo≈õci, portfel, emerytury
- Zdrowie (25%): profilaktyka, sport, ubezpieczenia
- Kariera senior (20%): ekspertyza, mentoring, konsulting
- Work-life balance (15%): hobby, rodzina, redukcja stresu

51-64 lat (Przygotowanie)
- Zabezpieczenie emerytury (45%): inwestycje pasywne, wyprzeda≈º aktyw√≥w
- Zdrowie profilaktyczne (30%): badania, leczenie
- Praca part-time (15%): konsulting, przekazanie wiedzy
- Pasje (10%): podr√≥≈ºe, realizacja marze≈Ñ

>=65 lat
{"options": []}

---

## REALISTYCZNE WYCENY (Polska 2024+)

Skale koszt√≥w:
Mikroinwestycje (500-2000): Kurs online, si≈Çownia roczna
Ma≈Çe wydatki (2000-10000): Certyfikat bran≈ºowy, weekend za granicƒÖ
≈örednie inwestycje (10000-50000): Studia podyplomowe, sprzƒôt do biznesu
Du≈ºe decyzje (50000-200000): MBA, wk≈Çad w≈Çasny na mieszkanie
Wielkie ruchy (>200000): Zakup nieruchomo≈õci, firma

Praca - zarobki roczne (results.money):
Praktykant: 30000-45000
Junior: 45000-65000
Mid: 65000-100000
Senior: 100000-150000
Lead/Manager: 150000-250000
W≈Çasna firma: 80000-300000 (du≈ºa rozpiƒôto≈õƒá)

REGU≈ÅA: Je≈õli price > 0 w currency="money", NIE DAWAJ ujemnego money w results!

---

## EFEKTY D≈ÅUGOTERMINOWE (results)

Przyk≈Çadowe konwersje (5 lat):

Studia MBA:
price: 50000 money
results: [
  {money: 120000},      // Wzrost zarobk√≥w
  {passive_income: 500}, // Lepsze inwestycje
  {satisfaction: 15}     // Realizacja
]

Zmiana pracy (ryzyko):
price: 0
results: [
  {money: -20000},     // Trudny start
  {satisfaction: 25},  // Nowe wyzwania
  {health: -10}        // Stres adaptacji
]

Sport regularny:
price: 3000 money
results: [
  {health: 25},        // G≈Ç√≥wny efekt
  {satisfaction: 10}   // Samopoczucie
]

Limity:
- health: zawsze 0-100 (nigdy nie przekraczaj!)
- passive_income: wzrost max 1000/5lat (chyba ≈ºe sprzeda≈º biznesu)
- relations: zmiany -20 do +30
- satisfaction: zmiany -30 do +40

---

## MECHANIZMY ANTY-EXPLOIT

Zabezpieczenia przed absurdami:
1. Zakaz spirali bogactwa:
   - Je≈õli passive_income > 10000 ‚Üí brak opcji "+50000 passive_income"
   - Progresja liniowa, nie wyk≈Çadnicza

2. Cooldown na wielkie decyzje:
   - ≈ölub: tylko raz (married=false)
   - Za≈Ço≈ºenie firmy: max raz na 15 lat
   - Zakup mieszkania: max raz na 10 lat

3. Bariery wej≈õcia:
   Je≈õli opcja == "W≈Çasna firma":
       wymagaj: do≈õwiadczenie >=10 lat LUB passive_income > 5000
   
   Je≈õli opcja == "Manager":
       wymagaj: poprzednia_rola == "Senior" i sta≈º >=5 lat

4. Blokada biedy:
   - Je≈õli money < 1000 ‚Üí zawsze 1 opcja z price=0 (praca dorywcza)

---

## R√ì≈ªNORODNO≈öƒÜ NARRACYJNA

Zmienne nazw (u≈ºywaj rotacyjnie):
Zamiast ciƒÖgle "Kurs X":
"Specjalizacja w Y"
"Certyfikat Z" 
"Bootcamp A"
"Warsztaty B"
"Program rozwojowy C"

Konkretne, unikalne opisy:
Z≈ÅE: "Inwestycja w nieruchomo≈õci"
DOBRE: "Zakup kawalerki pod wynajem w ma≈Çym mie≈õcie"

Z≈ÅE: "Poprawa zdrowia"
DOBRE: "Roczny karnet CrossFit + dietetyk"

Z≈ÅE: "Zmiana pracy"
DOBRE: "Skok do konkurencji z 30% podwy≈ºkƒÖ"

---

## WALIDACJE I BEZPIECZE≈ÉSTWO

Zakazy tre≈õciowe:
- Nielegalne dzia≈Çania (unikanie podatk√≥w, przestƒôpstwa)
- Konkretne porady medyczne/prawne
- Nazwy realnych firm (poza "ZUS" og√≥lnie)
- Hazard, substancje, niebezpieczne hobby

Edukacyjny ton:
- "Wzrost ≈õwiadomo≈õci finansowej"
- "Poprawa kondycji fizycznej"
- "Budowanie stabilno≈õci zawodowej"

---

## PRZYK≈ÅAD DOBREJ ODPOWIEDZI

Sytuacja: Wiek 28, money=45000, Mid Developer, education="In≈ºynier IT", married=false

{
  "options": [
    {
      "name": "Awans na Senior Developer",
      "price": 8000,
      "currency": "satisfaction",
      "is_work_related": true,
      "job_name": "Senior Developer",
      "results": [
        {"currency": "money", "amount": 85000},
        {"currency": "passive_income", "amount": 300},
        {"currency": "health", "amount": -8}
      ]
    },
    {
      "name": "Zakup ma≈Çego mieszkania na kredyt",
      "price": 45000,
      "currency": "money",
      "is_work_related": false,
      "results": [
        {"currency": "passive_income", "amount": -400},
        {"currency": "satisfaction", "amount": 20}
      ]
    },
    {
      "name": "Freelancing weekendowy + sport",
      "price": 2500,
      "currency": "money",
      "is_work_related": false,
      "results": [
        {"currency": "money", "amount": 35000},
        {"currency": "health", "amount": 15},
        {"currency": "relations", "amount": -5}
      ]
    },
    {
      "name": "≈ölub i stabilizacja ≈ºycia",
      "price": 15000,
      "currency": "money",
      "is_work_related": false,
      "results": [
        {"currency": "satisfaction", "amount": 30},
        {"currency": "relations", "amount": 25},
        {"currency": "money", "amount": -10000}
      ]
    }
  ]
}

---

## CHECKLIST PRZED WYS≈ÅANIEM

- JSON jest poprawny (parsuje siƒô bez b≈Çƒôd√≥w)
- Dok≈Çadnie N opcji
- Wszystkie price >= 0
- results majƒÖ 1-3 elementy
- Nazwy sƒÖ unikalne i konkretne (nie generyczne)
- Progresja kariery ma sens (bez skok√≥w)
- Warto≈õci finansowe realistyczne dla Polski
- ≈ªaden exploit (spirala bogactwa, duplikaty)
- Health w zakresie 0-100
- Je≈õli price w money > 0, brak ujemnego money w results

---

OSTATNIE PRZYPOMNIENIE: Nie generuj tego samego contentu 2 razy z rzƒôdu. Ka≈ºde wywo≈Çanie = ≈õwie≈ºe, kontekstowe, zr√≥≈ºnicowane opcje. SZYBKO I NA TEMAT.
"""
    print(request.history != [], request.history == [])

    user_prompt = f"""
    To moj stan gry:
    {request.game_interface.model_dump_json()}
    To moja historia: 
    {request.history}
    Wygeneruj taka ilosc opcji: {request.options_amount}
    """

    chat = GeminiChat()

    response_text = chat.message(user_prompt, system_prompt)
    print(response_text[7:-3])
    a=json.loads(response_text[7:-3])
    return a


@app.get("/health")
def health_check():
    return {"status": "healthy"}

# Funkcja pomocnicza do inicjalizacji chatu
def initialize_chat():
    """Inicjalizuje instancjƒô chatu je≈õli jeszcze nie istnieje."""
    global chat_instance
    if chat_instance is None:
        try:
            chat_instance = GeminiChat()
            chat_instance.start_chat()
        except ValueError as e:
            # Je≈õli klucz API nie jest dostƒôpny, aplikacja nie bƒôdzie mog≈Ça w pe≈Çni dzia≈Çaƒá
            # Logujemy b≈ÇƒÖd, ale nie przerywamy startu serwera
            print(f"B≈ÇƒÖd inicjalizacji chatu: {str(e)}")

# Funkcja pomocnicza do pobrania instancji chatu
def get_chat_instance() -> GeminiChat:
    """Pobiera instancjƒô chatu, zg≈ÇaszajƒÖc b≈ÇƒÖd je≈õli nie jest dostƒôpna."""
    if chat_instance is None:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Chat service is not available. Check API key."
        )
    return chat_instance

@app.post("/chat", response_model=ChatResponse)
def chat(message: ChatRequest) -> ChatResponse:
    """
    Endpoint do wysy≈Çania wiadomo≈õci do modelu Gemini.
    """
    chat = get_chat_instance()
    try:
        response_text = chat.message(message.message)
        return ChatResponse(
            response=response_text,
            status="success",
            model=chat.model.model_name
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )

@app.delete("/clear")
def clear_history():
    """
    Endpoint do czyszczenia historii rozmowy.
    """
    chat = get_chat_instance()
    chat.clear_chat()
    # Po wyczyszczeniu, musimy ponownie zainicjowaƒá sesjƒô czatu
    chat.start_chat()

    return {
        "message": "Historia rozmowy zosta≈Ça wyczyszczona",
        "status": "success"
    }


# Event System Endpoints
from app.event_service import EventService
from app.schemas import GameInterface, EventResponse, GameEvent

# Global event service instance
event_service = EventService()

@app.post("/events/trigger", response_model=EventResponse)
def trigger_event(game_state: GameInterface):
    """
    Wyzwala losowe wydarzenie na podstawie aktualnego stanu gry.
    """
    return event_service.choose_event(game_state)

@app.post("/events/available")
def get_available_events(game_state: GameInterface):
    """
    Zwraca listƒô dostƒôpnych wydarze≈Ñ dla aktualnego stanu gry.
    """
    available_events = event_service.get_available_events(game_state)
    return {
        "available_events": available_events,
        "count": len(available_events)
    }

@app.post("/events/simulate")
def simulate_events(game_state: GameInterface, num_events: int = 5):
    """
    Symuluje wiele wydarze≈Ñ dla testowania.
    """
    results = event_service.simulate_multiple_events(game_state, num_events)
    return {
        "simulation_results": results,
        "total_events": len(results),
        "events_occurred": sum(1 for r in results if r.event_occurred)
    }

@app.post("/events/reset")
def reset_events():
    """
    Resetuje listƒô wyzwolonych wydarze≈Ñ.
    """
    event_service.reset_triggered_events()
    return {"message": "Lista wyzwolonych wydarze≈Ñ zosta≈Ça zresetowana"}

@app.get("/events/info")
def get_events_info():
    """
    Zwraca informacje o systemie wydarze≈Ñ.
    """
    return {
        "total_events": len(event_service.EVENTS),
        "triggered_events": list(event_service.triggered_events),
        "available_events_file": str(event_service.EVENTS_FILE)
    }


# AI Event Generation Endpoints
from app.ai_event_generator import AIEventGenerator

# Global AI event generator instance
ai_generator = AIEventGenerator()
summary_service = SummaryService()

@app.post("/events/ai/describe")
def generate_ai_description(event: GameEvent, game_state: GameInterface):
    """
    Generuje opis wydarzenia u≈ºywajƒÖc AI.
    """
    description = ai_generator.generate_event_description(event, game_state)
    return {
        "original_description": event.description,
        "ai_description": description,
        "event_name": event.name
    }

@app.post("/events/ai/variation")
def generate_event_variation(base_event: Dict[str, Any], game_state: GameInterface):
    """
    Generuje wariacjƒô wydarzenia u≈ºywajƒÖc AI.
    """
    variation = ai_generator.generate_event_variation(base_event, game_state)
    return {
        "original_event": base_event,
        "ai_variation": variation
    }

@app.post("/events/ai/generate")
def generate_random_event(game_state: GameInterface, event_type: str = "random"):
    """
    Generuje ca≈Çkowicie nowe wydarzenie u≈ºywajƒÖc AI.
    """
    new_event = ai_generator.generate_random_event(game_state, event_type)
    return {
        "ai_generated_event": new_event,
        "game_state": game_state.dict()
    }

@app.post("/events/ai/trigger_with_description")
def trigger_event_with_ai_description(game_state: GameInterface):
    """
    Wyzwala wydarzenie i generuje AI opis.
    """
    # Najpierw wyzw√≥l wydarzenie
    event_result = event_service.choose_event(game_state)
    
    if event_result.event_occurred and event_result.event:
        # Generuj AI opis
        ai_description = ai_generator.generate_event_description(event_result.event, game_state)
        
        return {
            "event_occurred": True,
            "event": event_result.event,
            "updated_game_state": event_result.updated_game_state,
            "original_description": event_result.event.description,
            "ai_description": ai_description,
            "message": f"Wydarzenie: {event_result.event.name} - {ai_description}"
        }
    
    return event_result

@app.post("/summary")
def get_summary(game_state: GameSummaryRequest) -> GameSummaryResponse:
    """
    Zwraca podsumowanie gry.
    """
    return summary_service.getGameSummary(game_state)
